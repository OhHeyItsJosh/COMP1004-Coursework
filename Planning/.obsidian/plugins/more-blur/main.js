/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MoreBlur
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  tintColour: "#18161a",
  tintAlpha: 38,
  translucentWorkspace: true,
  workspaceTransparency: 60
};
var MoreBlur = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MoreBlurSettingsTab(this.app, this));
  }
  onunload() {
    const vibrancyHandler = window.require("vibrancy-win");
    const electronWindow = window.require("electron").remote.getCurrentWindow();
    vibrancyHandler.setAcrylic(electronWindow, 343932960) || vibrancyHandler.setBlurBehind(electronWindow, 0);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.setVibrancyTint();
    this.setBodyTranslucent(this.settings.translucentWorkspace);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  percentToByte(percent) {
    return Math.min(Math.round(percent / 100 * 255), 255);
  }
  setVibrancyTint() {
    const vibrancyHandler = window.require("vibrancy-win");
    const electronWindow = window.require("electron").remote.getCurrentWindow();
    vibrancyHandler.setAcrylic(electronWindow, this.encodeVibrancy()) || vibrancyHandler.setBlurBehind(electronWindow, 0);
    this.setTranslucentBodyColor();
  }
  encodeVibrancy() {
    if (this.settings.tintColour.length != 7)
      return -1;
    const red = parseInt(this.settings.tintColour.substring(1, 3), 16);
    const green = parseInt(this.settings.tintColour.substring(3, 5), 16);
    const blue = parseInt(this.settings.tintColour.substring(5, 7), 16);
    const alpha = this.percentToByte(this.settings.tintAlpha);
    const combine = alpha << 24 | blue << 16 | green << 8 | red;
    console.log(this.settings.tintColour);
    console.log(combine);
    return combine;
  }
  setBodyTranslucent(enabled) {
    const flag = "translucent-workspace";
    if (enabled) {
      if (!document.body.classList.contains(flag))
        document.body.classList.add(flag);
    } else {
      document.body.classList.remove(flag);
    }
  }
  setTranslucentBodyColor() {
    console.log("test: " + this.settings.workspaceTransparency);
    const root = document.querySelector(":root");
    root.style.setProperty("--background-dark-translucent", `${this.settings.tintColour}${this.percentToByte(this.settings.workspaceTransparency).toString(16)}`);
  }
};
var MoreBlurSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Tint").setDesc("Set the acrylic tint").addColorPicker(
      (picker) => picker.setValue(this.plugin.settings.tintColour).onChange(async (value) => {
        this.plugin.settings.tintColour = value;
        await this.plugin.saveSettings();
        this.plugin.setVibrancyTint();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Tint transparency").setDesc("Sets the transparency of the tint").addSlider(
      (slider) => slider.setLimits(0, 100, 1).setValue(this.plugin.settings.tintAlpha).onChange(async (value) => {
        this.plugin.settings.tintAlpha = value;
        await this.plugin.saveSettings();
        this.plugin.setVibrancyTint();
        slider.showTooltip();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Translucent workspace").setDesc("Makes the workspace translucent").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.translucentWorkspace).onChange(async (value) => {
        this.plugin.settings.translucentWorkspace = value;
        await this.plugin.saveSettings();
        this.plugin.setBodyTranslucent(value);
      })
    );
    new import_obsidian.Setting(containerEl).setName("Workspace transparency").setDesc("Sets the transparency of the workspace").addSlider(
      (slider) => slider.setLimits(0, 100, 1).setValue(this.plugin.settings.workspaceTransparency).onChange(async (value) => {
        this.plugin.settings.workspaceTransparency = value;
        await this.plugin.saveSettings();
        this.plugin.setVibrancyTint();
        slider.showTooltip();
      })
    );
  }
};
